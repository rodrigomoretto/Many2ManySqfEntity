// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'base.model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Company.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Company TABLE
class TableCompany extends SqfEntityTableBase {
  TableCompany() {
    // declare properties of EntityTable
    tableName = 'company';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('isSelected', DbType.bool, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCompany();
  }
}

// Acces TABLE
class TableAcces extends SqfEntityTableBase {
  TableAcces() {
    // declare properties of EntityTable
    tableName = 'access';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('description', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAcces();
  }
}

// CompanyAccess TABLE
class TableCompanyAccess extends SqfEntityTableBase {
  TableCompanyAccess() {
    // declare properties of EntityTable
    tableName = 'companyAccess';
    relationType = RelationType.MANY_TO_MANY;
    primaryKeyName = '';
    primaryKeyType = null;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableAcces.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'accessId',
          isPrimaryKeyField: true,
          isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableCompany.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'companyId',
          isPrimaryKeyField: true,
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCompanyAccess();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class BaseModel extends SqfEntityModelProvider {
  BaseModel() {
    databaseName = baseModel.databaseName;
    password = baseModel.password;
    dbVersion = baseModel.dbVersion;
    databaseTables = [
      TableCompany.getInstance,
      TableAcces.getInstance,
    ];

    bundledDatabasePath = baseModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Company
class Company {
  Company({this.id, this.name, this.isSelected, this.isDeleted}) {
    _setDefaultValues();
  }
  Company.withFields(this.id, this.name, this.isSelected, this.isDeleted) {
    _setDefaultValues();
  }
  Company.withId(this.id, this.name, this.isSelected, this.isDeleted) {
    _setDefaultValues();
  }
  Company.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['isSelected'] != null) {
      isSelected = o['isSelected'] == 1 || o['isSelected'] == true;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Company)
  int id;
  String name;
  bool isSelected;
  bool isDeleted;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Company)

// COLLECTIONS & VIRTUALS (Company)
  ///(RelationType.MANY_TO_MANY) (companyAccess) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plAcceses', 'plField2'..]) or so on..
  List<Acces> plAcceses;

  /// get Acces(s) filtered by accessId IN companyAccess
  AccesFilterBuilder getAcceses(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Acces()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where('id IN (SELECT accessId FROM companyAccess WHERE companyId=?)',
            parameterValue: id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Company)

  static const bool _softDeleteActivated = true;
  CompanyManager __mnCompany;

  CompanyManager get _mnCompany {
    return __mnCompany = __mnCompany ?? CompanyManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isSelected != null) {
      map['isSelected'] = forQuery ? (isSelected ? 1 : 0) : isSelected;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Company)
    if (!forQuery) {
      map['Acceses'] = await getAcceses().toMapList();
    }
// END COLLECTIONS (Company)

    return map;
  }

  /// This method returns Json String [Company]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Company]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, name, isSelected, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, isSelected, isDeleted];
  }

  static Future<List<Company>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Company.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Company>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Company>[];
    try {
      objList = list
          .map((company) => Company.fromMap(company as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Company.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Company>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Company> objList = <Company>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Company.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('company.plAcceses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAcceses'))) {
          /*_loadedFields.add('company.plAcceses'); */
          obj.plAcceses = obj.plAcceses ??
              await obj.getAcceses().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Company by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Company if exist, otherwise returns null
  Future<Company> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Company obj;
    final data = await _mnCompany.getById([id]);
    if (data.length != 0) {
      obj = Company.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('company.plAcceses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAcceses'))) {
          /*_loadedFields.add('company.plAcceses'); */
          obj.plAcceses = obj.plAcceses ??
              await obj.getAcceses().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Company) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnCompany.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCompany.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Company> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Company> companies) async {
    // final results = _mnCompany.saveAll('INSERT OR REPLACE INTO company (id,name, isSelected,isDeleted)  VALUES (?,?,?,?)',companies);
    // return results; removed in sqfentity_gen 1.3.0+6
    await BaseModel().batchStart();
    for (final obj in companies) {
      await obj.save();
    }
    //    return BaseModel().batchCommit();
    final result = await BaseModel().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnCompany.rawInsert(
              'INSERT OR REPLACE INTO company (id,name, isSelected,isDeleted)  VALUES (?,?,?,?)',
              [id, name, isSelected, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Company id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Company id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Company Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Company>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Company> companies) async {
    final results = await _mnCompany.rawInsertAll(
        'INSERT OR REPLACE INTO company (id,name, isSelected,isDeleted)  VALUES (?,?,?,?)',
        companies);
    return results;
  }

  /// Deletes Company

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Company invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnCompany
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCompany.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Company>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Company invoked (id=$id)');
    {
      return _mnCompany.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  CompanyFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CompanyFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CompanyFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CompanyFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion company

// region CompanyField
class CompanyField extends SearchCriteria {
  CompanyField(this.companyFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  CompanyFilterBuilder companyFB;

  CompanyField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CompanyFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param, SqlSyntax.EQuals,
            companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param, SqlSyntax.NotEQuals,
            companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.EQualsOrNull, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder isNull() {
    companyFB._addedBlocks = setCriteria(
        0,
        companyFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      companyFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          companyFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks);
      _waitingNot = '';
      companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
    }
    return companyFB;
  }

  CompanyFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      companyFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          companyFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks);
      _waitingNot = '';
      companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
      companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
    }
    return companyFB;
  }

  CompanyFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      companyFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          companyFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks);
      _waitingNot = '';
      companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
          companyFB._addedBlocks.retVal;
    }
    return companyFB;
  }

  CompanyFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      companyFB._addedBlocks = setCriteria(
          pFirst,
          companyFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        companyFB._addedBlocks = setCriteria(pFirst, companyFB.parameters,
            param, SqlSyntax.LessThan, companyFB._addedBlocks);
      } else {
        companyFB._addedBlocks = setCriteria(pFirst, companyFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, companyFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        companyFB._addedBlocks = setCriteria(pLast, companyFB.parameters, param,
            SqlSyntax.GreaterThan, companyFB._addedBlocks);
      } else {
        companyFB._addedBlocks = setCriteria(pLast, companyFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyFB._addedBlocks);
      }
    }
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThan, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param, SqlSyntax.LessThan,
            companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param, SqlSyntax.LessThan,
            companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    companyFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyFB._addedBlocks)
        : setCriteria(pValue, companyFB.parameters, param,
            SqlSyntax.GreaterThan, companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }

  CompanyFilterBuilder inValues(dynamic pValue) {
    companyFB._addedBlocks = setCriteria(
        pValue,
        companyFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        companyFB._addedBlocks);
    _waitingNot = '';
    companyFB._addedBlocks.needEndBlock[companyFB._blockIndex] =
        companyFB._addedBlocks.retVal;
    return companyFB;
  }
}
// endregion CompanyField

// region CompanyFilterBuilder
class CompanyFilterBuilder extends SearchCriteria {
  CompanyFilterBuilder(Company obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Company _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  CompanyFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CompanyFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CompanyFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CompanyFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CompanyFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CompanyFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CompanyFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CompanyFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CompanyFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CompanyFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CompanyFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CompanyField setField(CompanyField field, String colName, DbType dbtype) {
    return CompanyField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  CompanyField _id;
  CompanyField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CompanyField _name;
  CompanyField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  CompanyField _isSelected;
  CompanyField get isSelected {
    return _isSelected = setField(_isSelected, 'isSelected', DbType.bool);
  }

  CompanyField _isDeleted;
  CompanyField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Company._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Company> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Company._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCompany.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCompany.delete(qparams);
    }
    return r;
  }

  /// Recover List<Company> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Company bulk invoked');
    return _obj._mnCompany.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from company ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCompany.updateBatch(qparams, values);
  }

  /// This method always returns Company Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Company>
  Future<Company> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCompany.toList(qparams);
    final data = await objFuture;
    Company obj;
    if (data.isNotEmpty) {
      obj = Company.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('company.plAcceses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plAcceses'))) {
          /*_loadedFields.add('company.plAcceses'); */
          obj.plAcceses = obj.plAcceses ??
              await obj.getAcceses().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Company]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) companyCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final companiesFuture = await _obj._mnCompany.toList(qparams);
    final int count = companiesFuture[0]['CNT'] as int;
    if (companyCount != null) {
      companyCount(count);
    }
    return count;
  }

  /// This method returns List<Company> [Company]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Company>
  Future<List<Company>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Company> companiesData = await Company.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return companiesData;
  }

  /// This method returns Json String [Company]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Company]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Company]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCompany.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Company]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM company WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnCompany.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Company]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnCompany.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Company.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCompany.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CompanyFilterBuilder

// region CompanyFields
class CompanyFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fIsSelected;
  static TableField get isSelected {
    return _fIsSelected = _fIsSelected ??
        SqlSyntax.setField(_fIsSelected, 'isSelected', DbType.bool);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CompanyFields

//region CompanyManager
class CompanyManager extends SqfEntityProvider {
  CompanyManager()
      : super(BaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'company';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion CompanyManager
// region Acces
class Acces {
  Acces({this.id, this.description, this.isDeleted}) {
    _setDefaultValues();
  }
  Acces.withFields(this.id, this.description, this.isDeleted) {
    _setDefaultValues();
  }
  Acces.withId(this.id, this.description, this.isDeleted) {
    _setDefaultValues();
  }
  Acces.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['description'] != null) {
      description = o['description'] as String;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (Acces)
  int id;
  String description;
  bool isDeleted;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Acces)

// COLLECTIONS & VIRTUALS (Acces)
  ///(RelationType.MANY_TO_MANY) (companyAccess) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCompanies', 'plField2'..]) or so on..
  List<Company> plCompanies;

  /// get Company(s) filtered by companyId IN companyAccess
  CompanyFilterBuilder getCompanies(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Company()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where('id IN (SELECT companyId FROM companyAccess WHERE accessId=?)',
            parameterValue: id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Acces)

  static const bool _softDeleteActivated = true;
  AccesManager __mnAcces;

  AccesManager get _mnAcces {
    return __mnAcces = __mnAcces ?? AccesManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Acces)
    if (!forQuery) {
      map['Companies'] = await getCompanies().toMapList();
    }
// END COLLECTIONS (Acces)

    return map;
  }

  /// This method returns Json String [Acces]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Acces]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, description, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, description, isDeleted];
  }

  static Future<List<Acces>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Acces.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Acces>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Acces>[];
    try {
      objList = list
          .map((acces) => Acces.fromMap(acces as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Acces.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Acces>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Acces> objList = <Acces>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Acces.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('access.plCompanies') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCompanies'))) {
          /*_loadedFields.add('access.plCompanies'); */
          obj.plCompanies = obj.plCompanies ??
              await obj.getCompanies().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Acces by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Acces if exist, otherwise returns null
  Future<Acces> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Acces obj;
    final data = await _mnAcces.getById([id]);
    if (data.length != 0) {
      obj = Acces.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('access.plCompanies') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCompanies'))) {
          /*_loadedFields.add('access.plCompanies'); */
          obj.plCompanies = obj.plCompanies ??
              await obj.getCompanies().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Acces) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnAcces.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAcces.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Acces> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Acces> acceses) async {
    // final results = _mnAcces.saveAll('INSERT OR REPLACE INTO access (id,description,isDeleted)  VALUES (?,?,?)',acceses);
    // return results; removed in sqfentity_gen 1.3.0+6
    await BaseModel().batchStart();
    for (final obj in acceses) {
      await obj.save();
    }
    //    return BaseModel().batchCommit();
    final result = await BaseModel().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnAcces.rawInsert(
              'INSERT OR REPLACE INTO access (id,description,isDeleted)  VALUES (?,?,?)',
              [id, description, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Acces id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Acces id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Acces Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Acces>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Acces> acceses) async {
    final results = await _mnAcces.rawInsertAll(
        'INSERT OR REPLACE INTO access (id,description,isDeleted)  VALUES (?,?,?)',
        acceses);
    return results;
  }

  /// Deletes Acces

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Acces invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnAcces
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAcces.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Acces>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Acces invoked (id=$id)');
    {
      return _mnAcces.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  AccesFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return AccesFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  AccesFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return AccesFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion acces

// region AccesField
class AccesField extends SearchCriteria {
  AccesField(this.accesFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  AccesFilterBuilder accesFB;

  AccesField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  AccesFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    accesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accesFB.parameters, param, SqlSyntax.EQuals,
            accesFB._addedBlocks)
        : setCriteria(pValue, accesFB.parameters, param, SqlSyntax.NotEQuals,
            accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    accesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accesFB.parameters, param, SqlSyntax.EQualsOrNull,
            accesFB._addedBlocks)
        : setCriteria(pValue, accesFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder isNull() {
    accesFB._addedBlocks = setCriteria(
        0,
        accesFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      accesFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          accesFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accesFB._addedBlocks);
      _waitingNot = '';
      accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
          accesFB._addedBlocks.retVal;
    }
    return accesFB;
  }

  AccesFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      accesFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          accesFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accesFB._addedBlocks);
      _waitingNot = '';
      accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
          accesFB._addedBlocks.retVal;
      accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
          accesFB._addedBlocks.retVal;
    }
    return accesFB;
  }

  AccesFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      accesFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          accesFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accesFB._addedBlocks);
      _waitingNot = '';
      accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
          accesFB._addedBlocks.retVal;
    }
    return accesFB;
  }

  AccesFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      accesFB._addedBlocks = setCriteria(
          pFirst,
          accesFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accesFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        accesFB._addedBlocks = setCriteria(pFirst, accesFB.parameters, param,
            SqlSyntax.LessThan, accesFB._addedBlocks);
      } else {
        accesFB._addedBlocks = setCriteria(pFirst, accesFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accesFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        accesFB._addedBlocks = setCriteria(pLast, accesFB.parameters, param,
            SqlSyntax.GreaterThan, accesFB._addedBlocks);
      } else {
        accesFB._addedBlocks = setCriteria(pLast, accesFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accesFB._addedBlocks);
      }
    }
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    accesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accesFB.parameters, param, SqlSyntax.GreaterThan,
            accesFB._addedBlocks)
        : setCriteria(pValue, accesFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    accesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accesFB.parameters, param, SqlSyntax.LessThan,
            accesFB._addedBlocks)
        : setCriteria(pValue, accesFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    accesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accesFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accesFB._addedBlocks)
        : setCriteria(pValue, accesFB.parameters, param, SqlSyntax.LessThan,
            accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    accesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accesFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accesFB._addedBlocks)
        : setCriteria(pValue, accesFB.parameters, param, SqlSyntax.GreaterThan,
            accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }

  AccesFilterBuilder inValues(dynamic pValue) {
    accesFB._addedBlocks = setCriteria(
        pValue,
        accesFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        accesFB._addedBlocks);
    _waitingNot = '';
    accesFB._addedBlocks.needEndBlock[accesFB._blockIndex] =
        accesFB._addedBlocks.retVal;
    return accesFB;
  }
}
// endregion AccesField

// region AccesFilterBuilder
class AccesFilterBuilder extends SearchCriteria {
  AccesFilterBuilder(Acces obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Acces _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  AccesFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  AccesFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  AccesFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  AccesFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  AccesFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  AccesFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  AccesFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AccesFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AccesFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AccesFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AccesFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  AccesField setField(AccesField field, String colName, DbType dbtype) {
    return AccesField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  AccesField _id;
  AccesField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  AccesField _description;
  AccesField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  AccesField _isDeleted;
  AccesField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Acces._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Acces> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Acces._softDeleteActivated && !hardDelete) {
      r = await _obj._mnAcces.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnAcces.delete(qparams);
    }
    return r;
  }

  /// Recover List<Acces> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Acces bulk invoked');
    return _obj._mnAcces.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from access ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnAcces.updateBatch(qparams, values);
  }

  /// This method always returns Acces Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Acces>
  Future<Acces> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnAcces.toList(qparams);
    final data = await objFuture;
    Acces obj;
    if (data.isNotEmpty) {
      obj = Acces.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('access.plCompanies') && */ (preloadFields ==
                null ||
            preloadFields.contains('plCompanies'))) {
          /*_loadedFields.add('access.plCompanies'); */
          obj.plCompanies = obj.plCompanies ??
              await obj.getCompanies().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Acces]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) accesCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final accesesFuture = await _obj._mnAcces.toList(qparams);
    final int count = accesesFuture[0]['CNT'] as int;
    if (accesCount != null) {
      accesCount(count);
    }
    return count;
  }

  /// This method returns List<Acces> [Acces]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Acces>
  Future<List<Acces>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Acces> accesesData = await Acces.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return accesesData;
  }

  /// This method returns Json String [Acces]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Acces]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Acces]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnAcces.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Acces]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM access WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnAcces.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Acces]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnAcces.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Acces.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnAcces.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AccesFilterBuilder

// region AccesFields
class AccesFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion AccesFields

//region AccesManager
class AccesManager extends SqfEntityProvider {
  AccesManager()
      : super(BaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'access';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion AccesManager
// region CompanyAccess
class CompanyAccess {
  CompanyAccess({this.accessId, this.companyId, this.isDeleted}) {
    _setDefaultValues();
  }
  CompanyAccess.withFields(this.accessId, this.companyId, this.isDeleted) {
    _setDefaultValues();
  }
  CompanyAccess.withId(this.accessId, this.companyId, this.isDeleted) {
    _setDefaultValues();
  }
  CompanyAccess.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    accessId = int.tryParse(o['accessId'].toString());

    companyId = int.tryParse(o['companyId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plAcces = o['acces'] != null
        ? Acces.fromMap(o['acces'] as Map<String, dynamic>)
        : null;
    plCompany = o['company'] != null
        ? Company.fromMap(o['company'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (CompanyAccess)
  int accessId;
  int companyId;
  bool isDeleted;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (CompanyAccess)

// RELATIONSHIPS (CompanyAccess)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plAcces', 'plField2'..]) or so on..
  Acces plAcces;

  /// get Acces By AccessId
  Future<Acces> getAcces(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Acces().getById(accessId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plCompany', 'plField2'..]) or so on..
  Company plCompany;

  /// get Company By CompanyId
  Future<Company> getCompany(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Company().getById(companyId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (CompanyAccess)

  static const bool _softDeleteActivated = true;
  CompanyAccessManager __mnCompanyAccess;

  CompanyAccessManager get _mnCompanyAccess {
    return __mnCompanyAccess = __mnCompanyAccess ?? CompanyAccessManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (accessId != null) {
      map['accessId'] = forView ? plAcces.description : accessId;
    }

    if (companyId != null) {
      map['companyId'] = forView ? plCompany.name : companyId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (accessId != null) {
      map['accessId'] = forView ? plAcces.description : accessId;
    }

    if (companyId != null) {
      map['companyId'] = forView ? plCompany.name : companyId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [CompanyAccess]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [CompanyAccess]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [accessId, companyId, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [accessId, companyId, isDeleted];
  }

  static Future<List<CompanyAccess>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR CompanyAccess.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<CompanyAccess>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <CompanyAccess>[];
    try {
      objList = list
          .map((companyaccess) =>
              CompanyAccess.fromMap(companyaccess as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR CompanyAccess.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<CompanyAccess>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<CompanyAccess> objList = <CompanyAccess>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = CompanyAccess.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('access.plAcces') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plAcces'))) {
          /*_loadedFields.add('access.plAcces');*/
          obj.plAcces = obj.plAcces ??
              await obj.getAcces(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('company.plCompany') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCompany'))) {
          /*_loadedFields.add('company.plCompany');*/
          obj.plCompany = obj.plCompany ??
              await obj.getCompany(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns CompanyAccess by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int accessId, int companyId
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns CompanyAccess if exist, otherwise returns null
  Future<CompanyAccess> getById(int accessId, int companyId,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (accessId == null) {
      return null;
    }
    CompanyAccess obj;
    final data = await _mnCompanyAccess.getById([accessId, companyId]);
    if (data.length != 0) {
      obj = CompanyAccess.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('access.plAcces') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plAcces'))) {
          /*_loadedFields.add('access.plAcces');*/
          obj.plAcces = obj.plAcces ??
              await obj.getAcces(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('company.plCompany') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCompany'))) {
          /*_loadedFields.add('company.plCompany');*/
          obj.plCompany = obj.plCompany ??
              await obj.getCompany(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (CompanyAccess) object. If the Primary Key (accessId) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same accessId

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnCompanyAccess.rawInsert(
          'INSERT ${isSaved ? 'OR REPLACE' : ''} INTO companyAccess (accessId, companyId,isDeleted)  VALUES (?,?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<CompanyAccess> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<CompanyAccess> companyaccesses) async {
    // final results = _mnCompanyAccess.saveAll('INSERT OR REPLACE INTO companyAccess (accessId, companyId,isDeleted)  VALUES (?,?,?)',companyaccesses);
    // return results; removed in sqfentity_gen 1.3.0+6
    await BaseModel().batchStart();
    for (final obj in companyaccesses) {
      await obj.save();
    }
    //    return BaseModel().batchCommit();
    final result = await BaseModel().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns 1
  Future<int> upsert() async {
    try {
      if (await _mnCompanyAccess.rawInsert(
              'INSERT OR REPLACE INTO companyAccess (accessId, companyId,isDeleted)  VALUES (?,?,?)',
              [accessId, companyId, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'CompanyAccess accessId=$accessId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'CompanyAccess accessId=$accessId did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'CompanyAccess Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<CompanyAccess>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<CompanyAccess> companyaccesses) async {
    final results = await _mnCompanyAccess.rawInsertAll(
        'INSERT OR REPLACE INTO companyAccess (accessId, companyId,isDeleted)  VALUES (?,?,?)',
        companyaccesses);
    return results;
  }

  /// Deletes CompanyAccess

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete CompanyAccess invoked (accessId=$accessId)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnCompanyAccess.delete(QueryParams(
          whereString: 'accessId=? AND companyId=?',
          whereArguments: [accessId, companyId]));
    } else {
      return _mnCompanyAccess.updateBatch(
          QueryParams(
              whereString: 'accessId=? AND companyId=?',
              whereArguments: [accessId, companyId]),
          {'isDeleted': 1});
    }
  }

  /// Recover CompanyAccess>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover CompanyAccess invoked (accessId=$accessId)');
    {
      return _mnCompanyAccess.updateBatch(
          QueryParams(
              whereString: 'accessId=? AND companyId=?',
              whereArguments: [accessId, companyId]),
          {'isDeleted': 0});
    }
  }

  CompanyAccessFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CompanyAccessFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CompanyAccessFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CompanyAccessFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion companyaccess

// region CompanyAccessField
class CompanyAccessField extends SearchCriteria {
  CompanyAccessField(this.companyaccessFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  CompanyAccessFilterBuilder companyaccessFB;

  CompanyAccessField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CompanyAccessFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    companyaccessFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.EQuals, companyaccessFB._addedBlocks)
        : setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.NotEQuals, companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    companyaccessFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.EQualsOrNull, companyaccessFB._addedBlocks)
        : setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder isNull() {
    companyaccessFB._addedBlocks = setCriteria(
        0,
        companyaccessFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      companyaccessFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          companyaccessFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyaccessFB._addedBlocks);
      _waitingNot = '';
      companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
          companyaccessFB._addedBlocks.retVal;
    }
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      companyaccessFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          companyaccessFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyaccessFB._addedBlocks);
      _waitingNot = '';
      companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
          companyaccessFB._addedBlocks.retVal;
      companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
          companyaccessFB._addedBlocks.retVal;
    }
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      companyaccessFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          companyaccessFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyaccessFB._addedBlocks);
      _waitingNot = '';
      companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
          companyaccessFB._addedBlocks.retVal;
    }
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      companyaccessFB._addedBlocks = setCriteria(
          pFirst,
          companyaccessFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          companyaccessFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        companyaccessFB._addedBlocks = setCriteria(
            pFirst,
            companyaccessFB.parameters,
            param,
            SqlSyntax.LessThan,
            companyaccessFB._addedBlocks);
      } else {
        companyaccessFB._addedBlocks = setCriteria(
            pFirst,
            companyaccessFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            companyaccessFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        companyaccessFB._addedBlocks = setCriteria(
            pLast,
            companyaccessFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            companyaccessFB._addedBlocks);
      } else {
        companyaccessFB._addedBlocks = setCriteria(
            pLast,
            companyaccessFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            companyaccessFB._addedBlocks);
      }
    }
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    companyaccessFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.GreaterThan, companyaccessFB._addedBlocks)
        : setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    companyaccessFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.LessThan, companyaccessFB._addedBlocks)
        : setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    companyaccessFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, companyaccessFB._addedBlocks)
        : setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.LessThan, companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    companyaccessFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.LessThanOrEquals, companyaccessFB._addedBlocks)
        : setCriteria(pValue, companyaccessFB.parameters, param,
            SqlSyntax.GreaterThan, companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }

  CompanyAccessFilterBuilder inValues(dynamic pValue) {
    companyaccessFB._addedBlocks = setCriteria(
        pValue,
        companyaccessFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        companyaccessFB._addedBlocks);
    _waitingNot = '';
    companyaccessFB._addedBlocks.needEndBlock[companyaccessFB._blockIndex] =
        companyaccessFB._addedBlocks.retVal;
    return companyaccessFB;
  }
}
// endregion CompanyAccessField

// region CompanyAccessFilterBuilder
class CompanyAccessFilterBuilder extends SearchCriteria {
  CompanyAccessFilterBuilder(CompanyAccess obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  CompanyAccess _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  CompanyAccessFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CompanyAccessFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CompanyAccessFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CompanyAccessFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CompanyAccessFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CompanyAccessFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CompanyAccessFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CompanyAccessFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CompanyAccessFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CompanyAccessFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CompanyAccessFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CompanyAccessField setField(
      CompanyAccessField field, String colName, DbType dbtype) {
    return CompanyAccessField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  CompanyAccessField _accessId;
  CompanyAccessField get accessId {
    return _accessId = setField(_accessId, 'accessId', DbType.integer);
  }

  CompanyAccessField _companyId;
  CompanyAccessField get companyId {
    return _companyId = setField(_companyId, 'companyId', DbType.integer);
  }

  CompanyAccessField _isDeleted;
  CompanyAccessField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (CompanyAccess._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<CompanyAccess> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (CompanyAccess._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCompanyAccess.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCompanyAccess.delete(qparams);
    }
    return r;
  }

  /// Recover List<CompanyAccess> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover CompanyAccess bulk invoked');
    return _obj._mnCompanyAccess.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'accessId IN (SELECT accessId from companyAccess ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCompanyAccess.updateBatch(qparams, values);
  }

  /// This method always returns CompanyAccess Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<CompanyAccess>
  Future<CompanyAccess> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCompanyAccess.toList(qparams);
    final data = await objFuture;
    CompanyAccess obj;
    if (data.isNotEmpty) {
      obj = CompanyAccess.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('access.plAcces') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plAcces'))) {
          /*_loadedFields.add('access.plAcces');*/
          obj.plAcces = obj.plAcces ??
              await obj.getAcces(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedFields.contains('company.plCompany') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCompany'))) {
          /*_loadedFields.add('company.plCompany');*/
          obj.plCompany = obj.plCompany ??
              await obj.getCompany(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [CompanyAccess]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) companyaccessCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final companyaccessesFuture = await _obj._mnCompanyAccess.toList(qparams);
    final int count = companyaccessesFuture[0]['CNT'] as int;
    if (companyaccessCount != null) {
      companyaccessCount(count);
    }
    return count;
  }

  /// This method returns List<CompanyAccess> [CompanyAccess]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<CompanyAccess>
  Future<List<CompanyAccess>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<CompanyAccess> companyaccessesData =
        await CompanyAccess.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return companyaccessesData;
  }

  /// This method returns Json String [CompanyAccess]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [CompanyAccess]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [CompanyAccess]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCompanyAccess.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [CompanyAccess]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `accessId`companyId` FROM companyAccess WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<accessId,companyId> [CompanyAccess]
  /// <returns>List<accessId,companyId>
  Future<List<CompanyAccess>> toListPrimaryKey(
      [bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    qparams.selectColumns = ['accessId', 'companyId'];
    final companyaccessFuture = await _obj._mnCompanyAccess.toList(qparams);
    return await CompanyAccess.fromMapList(companyaccessFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [CompanyAccess]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnCompanyAccess.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await CompanyAccess.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCompanyAccess.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CompanyAccessFilterBuilder

// region CompanyAccessFields
class CompanyAccessFields {
  static TableField _fAccessId;
  static TableField get accessId {
    return _fAccessId = _fAccessId ??
        SqlSyntax.setField(_fAccessId, 'accessId', DbType.integer);
  }

  static TableField _fCompanyId;
  static TableField get companyId {
    return _fCompanyId = _fCompanyId ??
        SqlSyntax.setField(_fCompanyId, 'companyId', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CompanyAccessFields

//region CompanyAccessManager
class CompanyAccessManager extends SqfEntityProvider {
  CompanyAccessManager()
      : super(BaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'companyAccess';
  static final List<String> _primaryKeyList = ['accessId', 'companyId'];
  static final String _whereStr = 'accessId=? AND companyId=?';
}

//endregion CompanyAccessManager
class BaseModelSequenceManager extends SqfEntityProvider {
  BaseModelSequenceManager() : super(BaseModel());
}
// END OF ENTITIES
